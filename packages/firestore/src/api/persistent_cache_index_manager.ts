/**
 * @license
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  FirestoreClient,
  firestoreClientDeleteAllFieldIndexes,
  firestoreClientSetFieldIndexManagementApi
} from '../core/firestore_client';
import { cast } from '../util/input_validation';
import { logDebug, logWarn } from '../util/log';

import { ensureFirestoreConfigured, Firestore } from './database';
import { FieldIndexManagementApiImpl } from '../index/field_index_management';
import { debugCast } from '../util/assert';

/**
 * A `PersistentCacheIndexManager` for configuring persistent cache indexes used
 * for local query execution.
 *
 * To use, call `getPersistentCacheIndexManager()` to get an instance.
 */
export interface PersistentCacheIndexManager {
  /** A type string to uniquely identify instances of this class. */
  readonly type: 'PersistentCacheIndexManager';
}

class PersistentCacheIndexManagerImpl implements PersistentCacheIndexManager {
  readonly type = 'PersistentCacheIndexManager';

  installed = false;

  fieldIndexManagementApiImpl: FieldIndexManagementApiImpl | null = null;

  constructor(readonly client: FirestoreClient) {}
}

/**
 * Returns the PersistentCache Index Manager used by the given `Firestore`
 * object.
 *
 * @return The `PersistentCacheIndexManager` instance, or `null` if local
 * persistent storage is not in use.
 */
export function getPersistentCacheIndexManager(
  firestore: Firestore
): PersistentCacheIndexManager | null {
  firestore = cast(firestore, Firestore);

  const cachedInstance = persistentCacheIndexManagerByFirestore.get(firestore);
  if (cachedInstance) {
    return cachedInstance;
  }

  const client = ensureFirestoreConfigured(firestore);
  if (client._uninitializedComponentsProvider?._offlineKind !== 'persistent') {
    return null;
  }

  const instance = new PersistentCacheIndexManagerImpl(client);
  persistentCacheIndexManagerByFirestore.set(firestore, instance);
  return instance;
}

/**
 * Enables the SDK to create persistent cache indexes automatically for local
 * query execution when the SDK believes cache indexes can help improve
 * performance.
 *
 * This feature is disabled by default.
 */
export function enablePersistentCacheIndexAutoCreation(
  indexManager: PersistentCacheIndexManager
): void {
  const indexManagerImpl = cast(indexManager, PersistentCacheIndexManagerImpl);
  indexManagerImpl.client.verifyNotTerminated();

  if (!indexManagerImpl.fieldIndexManagementApiImpl) {
    indexManagerImpl.fieldIndexManagementApiImpl =
      new FieldIndexManagementApiImpl();
  }

  indexManagerImpl.fieldIndexManagementApiImpl.indexAutoCreationEnabled = true;

  if (indexManagerImpl.installed) {
    return;
  }

  const promise = firestoreClientSetFieldIndexManagementApi(
    indexManagerImpl.client,
    indexManagerImpl.fieldIndexManagementApiImpl
  );

  promise.then(_ => {
    indexManagerImpl.installed = true;
    logDebug('enabling persistent cache index auto creation succeeded');
  });

  promise.catch(error =>
    logWarn('enabling persistent cache index auto creation failed', error)
  );
}

/**
 * Stops creating persistent cache indexes automatically for local query
 * execution. The indexes which have been created by calling
 * `enablePersistentCacheIndexAutoCreation()` still take effect.
 */
export function disablePersistentCacheIndexAutoCreation(
  indexManager: PersistentCacheIndexManager
): void {
  const indexManagerImpl = cast(indexManager, PersistentCacheIndexManagerImpl);
  // TODO: Refactor this code such that disabling persistent cache auto creation
  //  does _not_ need FieldIndexManagementApiImpl (i.e. it just uses the
  //  interface) so that FieldIndexManagementApiImpl can be tree-shaken away if
  //  the only client-side indexing function used is this one.
  if (indexManagerImpl.fieldIndexManagementApiImpl) {
    indexManagerImpl.fieldIndexManagementApiImpl.indexAutoCreationEnabled =
      false;
  }
}

/**
 * Removes all persistent cache indexes.
 *
 * Please note this function will also deletes indexes generated by
 * `setIndexConfiguration()`, which is deprecated.
 */
export function deleteAllPersistentCacheIndexes(
  indexManager: PersistentCacheIndexManager
): void {
  const indexManagerImpl = cast(indexManager, PersistentCacheIndexManagerImpl);

  indexManagerImpl.client.verifyNotTerminated();

  // TODO: Refactor this code such that deleting field indexes does _not_ need
  //  FieldIndexManagementApiImpl so that FieldIndexManagementApiImpl can be
  //  tree-shaken away if the only client-side indexing function used is this
  //  one.
  const promise = firestoreClientDeleteAllFieldIndexes(indexManagerImpl.client);

  promise.then(_ =>
    logDebug('deleting all persistent cache indexes succeeded')
  );

  promise.catch(error =>
    logWarn('deleting all persistent cache indexes failed', error)
  );
}

/**
 * Maps `Firestore` instances to their corresponding
 * `PersistentCacheIndexManager` instances.
 *
 * Use a `WeakMap` so that the mapping will be automatically dropped when the
 * `Firestore` instance is garbage collected. This emulates a private member
 * as described in https://goo.gle/454yvug.
 */
const persistentCacheIndexManagerByFirestore = new WeakMap<
  Firestore,
  PersistentCacheIndexManager
>();

/**
 * Test-only hooks into the SDK for use exclusively by tests.
 */
export class TestingHooks {
  private constructor() {
    throw new Error('creating instances is not supported');
  }

  static setIndexAutoCreationSettings(
    indexManager: PersistentCacheIndexManager,
    settings: {
      indexAutoCreationMinCollectionSize?: number;
      relativeIndexReadCostPerDocument?: number;
    }
  ): void {
    const indexManagerImpl = debugCast(
      indexManager,
      PersistentCacheIndexManagerImpl
    );

    if (!indexManagerImpl.fieldIndexManagementApiImpl) {
      indexManagerImpl.fieldIndexManagementApiImpl =
        new FieldIndexManagementApiImpl();
    }

    if (settings.indexAutoCreationMinCollectionSize !== undefined) {
      indexManagerImpl.fieldIndexManagementApiImpl.indexAutoCreationMinCollectionSize =
        settings.indexAutoCreationMinCollectionSize;
    }
    if (settings.relativeIndexReadCostPerDocument !== undefined) {
      indexManagerImpl.fieldIndexManagementApiImpl.relativeIndexReadCostPerDocument =
        settings.relativeIndexReadCostPerDocument;
    }
  }
}
